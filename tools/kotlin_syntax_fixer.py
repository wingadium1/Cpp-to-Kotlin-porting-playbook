#!/usr/bin/env python3
"""
Kotlin Syntax Fixer
Fixes C++ syntax remnants in Kotlin files generated by conversion tools
"""
import re
import sys

class KotlinSyntaxFixer:
    def __init__(self):
        self.fixes = [
            # 1. C++ pointer syntax to Kotlin property access
            (r'ccPrinter->', r'ccPrinter.'),
            
            # 2. Remove C++ cast syntax
            (r'\(char \*\)', r''),
            
            # 3. Fix C++ pointer parameters to Kotlin nullable types
            (r'param: (\w+) \*(\w+)', r'param: \1? // \2'),
            
            # 4. Fix C++ LONGLONG to Kotlin Long
            (r'LONGLONG\s+', r'var '),
            
            # 5. Fix C++ pointer declarations
            (r'(\w+)\s*\*\s*(\w+)', r'\2: \1?'),
            
            # 6. Fix C++ array declarations with pointers
            (r'(\w+)\s+(\w+)\[(\d+)\]', r'var \2 = Array<\1>(\3)'),
            
            # 7. Fix broken string formatting pattern
            (r'val temp = String\.format\("([^"]*)",\s*([^)]+)\);\s*(\w+)\s*=\s*temp\.toCharArray\(\);?', 
             r'\3 = String.format("\1", \2)'),
            
            # 4. Fix C++ style variable declarations with arrays
            (r'val (\w+) = CharArray\(\d+\),\s*(\w+)\[(\d+)\],\s*(\w+)\[(\d+)\];?', 
             r'var \1 = CharArray(20)\n\tvar \2 = CharArray(\3)\n\tvar \4 = CharArray(\5)'),
            (r'val (\w+) = CharArray\(\d+\),(\w+)\[(\d+)\],(\w+)\[(\d+)\];?', 
             r'var \1 = CharArray(10)\n\tvar \2 = CharArray(\3)\n\tvar \4 = CharArray(\5)'),
            
            # 5. Fix complex broken string assignment patterns
            (r'val temp = String\.format\("([^"]*)",\s*([^)]+)\);\s*([^.]+)\.(\w+)\s*=\s*temp\.toCharArray\(\);?([^,]*),\s*([^)]+)\);?', 
             r'Macro.strnumber(\3.\4, 20, String.format("\1", \2))'),
            
            # 6. Fix strcpy calls to proper Kotlin assignment
            (r'strcpy\(([^,]+),\s*"([^"]*)"\)', r'\1 = "\2"'),
            (r'strcpy\(([^,]+),\s*([^)]+)\)', r'\1 = \2'),
            
            # 7. Fix strcat calls to proper concatenation
            (r'strcat\(([^,]+),\s*"([^"]*)"\)', r'\1 += "\2"'),
            
            # 8. Fix sprintf calls to String.format
            (r'sprintf\(([^,]+),\s*"([^"]*)",\s*([^)]+)\)', r'\1 = String.format("\2", \3)'),
            
            # 9. Fix length calls
            (r'strlen\(([^)]+)\)', r'\1.length'),
            
            # 10. Fix increment/decrement syntax
            (r'(\w+)\s*\+\+', r'\1++'),
            (r'(\w+)\s*--', r'\1--'),
            
            # 11. Fix array access with address operator
            (r'&([a-zA-Z_]\w*)\[(\d+)\]', r'\1[\2]'),
            
            # 12. Remove NULL and replace with null
            (r'\bNULL\b', r'null'),
            
            # 13. Fix variable declarations
            (r'\bchar\s+(\w+)\[(\d+)\];?', r'var \1 = CharArray(\2)'),
            (r'\bchar\s+(\w+);?', r'var \1: String = ""'),
            (r'\bint\s+(\w+);?', r'var \1: Int = 0'),
            (r'\bshort\s+(\w+);?', r'var \1: Short = 0'),
            (r'\blong\s+(\w+);?', r'var \1: Long = 0L'),
            (r'\bunsigned\s+short\s+(\w+)', r'var \1: UShort = 0u'),
            
            # 14. Fix method calls to use Kotlin naming conventions
            (r'ccPrinter\.SetOkyeu\(', r'ccPrinter.setOkyeu('),
            (r'ccPrinter\.SetEigyo\(', r'ccPrinter.setEigyo('),
            (r'ccPrinter\.setOkyeuzumitasyo\(', r'ccPrinter.setOkyeuzumitasyo('),
            
            # 15. Fix for loops
            (r'for\s*\(\s*([^;]+);\s*([^;]+);\s*([^)]+)\s*\)', r'for (\1; \2; \3)'),
            
            # 16. Fix semicolons at end of statements (remove extras)
            (r';\s*;', r';'),
            
            # 17. Fix comment syntax issues
            (r'//CHG\s*', r'// CHG '),
            
            # 18. Fix boolean values
            (r'\bbaka_TRUE\b', r'baka_TRUE'),
            (r'\bbaka_FALT\b', r'baka_FALT'),
            
            # 19. Fix atoi function calls
            (r'\batoi\(([^)]+)\)', r'\1.toInt()'),
            
            # 20. Fix broken complex assignments
            (r'([^;]+);\s*([^.]+\.\w+)\s*=\s*temp\.toCharArray\(\),\s*([^)]+)\);?', 
             r'\1\n\t\tMacro.strnumber(\2, 20, temp)'),
        ]
    
    def fix_syntax(self, content: str) -> str:
        """Apply all syntax fixes to the content"""
        fixed_content = content
        
        for pattern, replacement in self.fixes:
            fixed_content = re.sub(pattern, replacement, fixed_content)
        
        # Additional cleanup for specific patterns
        fixed_content = self.fix_string_operations(fixed_content)
        fixed_content = self.fix_macro_calls(fixed_content)
        
        return fixed_content
    
    def fix_string_operations(self, content: str) -> str:
        """Fix specific string operation patterns"""
        # Fix Macro.strcat calls with proper Kotlin StringBuilder usage
        content = re.sub(
            r'Macro\.strcat\(ccPrinter\.caData\.hu_field,\s*([^)]+)\)',
            r'ccPrinter.caData.hu_field.append(\1)',
            content
        )
        
        # Fix Macro.strnumber calls
        content = re.sub(
            r'Macro\.strnumber\(([^,]+),\s*(\d+),\s*([^)]+)\)',
            r'Macro.strnumber(\1, \2, \3)',
            content
        )
        
        return content
    
    def fix_macro_calls(self, content: str) -> str:
        """Fix macro function calls"""
        # Fix strnumber calls on ccPrinter
        content = re.sub(
            r'ccPrinter\.strnumber\s*\(\s*([^,]+),\s*([^)]+)\s*\)',
            r'ccPrinter.strnumber(\1, \2)',
            content
        )
        
        return content
    
    def fix_file(self, file_path: str) -> bool:
        """Fix syntax in a Kotlin file"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            fixed_content = self.fix_syntax(content)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(fixed_content)
            
            print(f"✅ Fixed syntax in: {file_path}")
            return True
            
        except Exception as e:
            print(f"❌ Error fixing {file_path}: {e}")
            return False

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 kotlin_syntax_fixer.py <kotlin_file>")
        sys.exit(1)
    
    fixer = KotlinSyntaxFixer()
    kotlin_file = sys.argv[1]
    
    if fixer.fix_file(kotlin_file):
        print(f"Kotlin syntax fixing completed for: {kotlin_file}")
    else:
        print(f"Failed to fix syntax in: {kotlin_file}")
        sys.exit(1)

if __name__ == "__main__":
    main()